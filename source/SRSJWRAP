SRSJWRAP TITLE '- SYSOUT Retrieval Services (SRS) Despooler Program'
SRSJWRAP CSECT
SRSJWRAP AMODE 31
SRSJWRAP RMODE 24
*=====================================================================*
*                                                                     *
*  MODULE NAME:  SRSJWRAP                                             *
*                                                                     *
*  OPERATION:                                                         *
*                                                                     *
*    This module is part of SYSOUT Retrieval Services (SRS) a         *
*    generalized external interface to data residing on the JES spool.*
*                                                                     *
*    This module retrieves data from the JES spool, "wraps" JCL       *
*    around the data, and submits the combined JCL/data as a batch    *
*    job.  This is especially useful for data sent to or recieved     *
*    from an NJE site.                                                *
*                                                                     *
*    The JCL is supplied in file "JCLFILE".  The merged JCL images    *
*    and data retrieved from the spool are written to the "OUTRDR"    *
*    file.  The spool data is concatenated after all JCL statements   *
*    have been written, unless the JCL file contains a special        *
*    record with "##SYSOUT" starting in column 1 of the data.  If     *
*    this statement is found, spool data is inserted at this point    *
*    followed by the remainder of the JCL.  For example:              *
*                                                                     *
*    //jobcard                                                        *
*    //*************************************************************  *
*    //* COPY SPOOL DATA TO A DASD FILE                            *  *
*    //*************************************************************  *
*    //COPY1   EXEC PGM=IEBGENER                                      *
*    //SYSUT2   DD DSN=xxx,DPS=(,CATLG),UNIT=SYSDA,SPACE=...          *
*    //SYSIN    DD DUMMY                                              *
*    //SYSPRINT DD SYSOUT=*                                           *
*    //SYSUT1   DD *                                                  *
*    ##SYSOUT DATA GOES HERE                                          *
*    /*                                                               *
*    //*************************************************************  *
*    //* THIS IS NEXT STEP OF THE JOB                              *  *
*    //*************************************************************  *
*    //STEP2   EXEC PGM=...                                           *
*        ...                                                          *
*                                                                     *
*    This module is called from the SRSTASK routine.  See that        *
*    module for documentation on the invocation environment.          *
*                                                                     *
*    ATTRIBUTES:                                                      *
*                                                                     *
*      LOCATION:  RESIDENT IN OWN ADDRESS SPACE                       *
*      STATE:  PROBLEM                                                *
*      AMODE:  31-BIT                                                 *
*      RMODE:  24-BIT                                                 *
*      KEY:  KEY 8                                                    *
*      MODE:  TASK                                                    *
*      SERIALIZATION: NONE                                            *
*      TYPE:  NOT REENTRANT                                           *
*                                                                     *
*  Written By: Dave Danner                                      @A11202
*              Summit Technical Services, Inc.                  @A11202
*                                                               @A11202
*          January 1999 (Source modified from PSOJWRAP)               *
*                                                                     *
*  Change log:                                                        *
*=====================================================================*
SRSJWRAP SRSBEGIN LEVEL=BASE                                       V130
         BAKR  R14,0                Save environment
         LR    R12,R15              Set base register
         USING SRSJWRAP,R12
*
         LR    R9,R1                Copy SRS data block address
         USING SRSDATA,R9
         TM    SRSFLAGS,SRSDREC     Data record call ?
         BNO   NODREC               No, continue
*=====================================================================*
* Data Record Call                                                    *
*=====================================================================*
         LH    R3,SRSRECL          Get length of data record
         LA    R4,OUTRDR           Get reader DCB address
         LH    R4,DCBLRECL-IHADCB(,R4)  Get reader LRECL
         CR    R3,R4               Do we need to use buffer ?
         BNL   DATALOOP            No, continue
         OI    STATUS,SYSBUFF      Write data from buffer
DATALOOP DS    0H
         L     R1,SRSREC           Point at data record
         LR    R2,R1               Save address
         TM    STATUS,SYSBUFF      Are we buffering sysout data ?
         BNO   WRITEDAT            No, write straight from input buff
         SH    R4,=H'2'            Set up for execute below
         BCTR  R3,0                Set up for execute below
         LA    R5,DATABUFF         Get address of data buffer
         MVI   0(R5),C' '          Initialize buffer ..
         EX    R4,CLRRDR              .. to blanks
         EX    R3,MOVERDR          Move data stmt to reader
         LR    R2,R5               Get address of buffer
WRITEDAT DS    0H
         PUT   OUTRDR,(2)          Write data to internal reader
         B     RETURN0
         EJECT
NODREC   DS    0H
         TM    SRSFLAGS,SRSFIRST    Start-of-dataset call ?
         BNO   NOFIRST              No, continue
*=====================================================================*
* Start of Dataset Call                                               *
*=====================================================================*
         MVI   STATUS,X'00'        Reset STATUS bits
         OPEN  JCLFILE             Open JCL statements dataset
* Copy JCL statements from JCLFILE to the reader dataset (OUTRDR)
         LA    R3,JCLFILE          Get JCLFILE DCB address
         LH    R3,DCBLRECL-IHADCB(,R3)  Get JCLFILE LRECL
         LA    R4,OUTRDR           Get reader DCB address
         LH    R4,DCBLRECL-IHADCB(,R4)  Get reader LRECL
         CR    R3,R4               Do we need to use buffer ?
         BNL   JCLLOOP             No, continue
         SH    R4,=H'2'            Set up for execute below
         BCTR  R3,0                Set up for execute below
         OI    STATUS,JCLBUFF      Write JCL from buffer
JCLLOOP  DS    0H
         GET   JCLFILE             Read the next JCL statement
         TM    SRSFLAGS,SRSEOF     End-of-dataset call ?
         BO    NOINSCK             Yes, bypass insert-data check
         CLC   =C'##SYSOUT',0(R1)  Special sysout-insert record ?
         BE    RETURN0             Yes, insert sysout data now
NOINSCK  DS    0H
         LR    R2,R1               Save buffer address
         TM    STATUS,JCLBUFF      Are we buffering jcl records ?
         BNO   WRITEJCL            No, write straight from input buff
         LA    R5,DATABUFF         Get address of data buffer
         MVI   0(R5),C' '          Initialize buffer ..
         EX    R4,CLRRDR              .. to blanks
         EX    R3,MOVERDR          Move jcl stmt to buffer
         LR    R2,R5               Get address of buffer
WRITEJCL DS    0H
         PUT   OUTRDR,(2)          Write JCL stmt to intrdr
         B     JCLLOOP             Loop to process next stmt
CLRRDR   MVC   1(*-*,R5),0(R5)
MOVERDR  MVC   0(*-*,R5),0(R1)
         EJECT
NOFIRST  DS    0H
         TM    SRSFLAGS,SRSEOF      End-of-dataset call ?
         BNO   NOLAST               No, continue
*=====================================================================*
* End of Dataset Call                                                 *
*=====================================================================*
         TM    STATUS,JCLWROTE     Has all JCL been written ?
         BNO   JCLLOOP             No, write rest of it
         B     JOBDONE             Yes, write /*EOF card
         EJECT
NOLAST   DS    0H
         TM    SRSFLAGS,SRSINIT     Initilization call ?
         BNO   NOINIT               No, continue
*=====================================================================*
* Initialization Call                                                 *
*=====================================================================*
         OPEN  (OUTRDR,OUTPUT)      Open output dataset (internal rdr)
         B     RETURN0
         EJECT
NOINIT   DS    0H
         TM    SRSFLAGS,SRSTERM     Termination call ?
         BNO   NOTERM               No, continue
*=====================================================================*
* Termination Call                                                    *
*=====================================================================*
         CLOSE (OUTRDR)             Close output dataset (internal rdr)
         B     RETURN0
         EJECT
NOTERM   DS    0H
         WTO   'Unsupported value in SRSFLAGS - interface terminated'
         LA    R15,8               Set RC=8
         B     RETURN
         SPACE 5
*=====================================================================*
* The following code is executed when EOF is hit on JCLFILE.          *
* Note that this can happen during SRSFIRST or SRSEOF processing.     *
*=====================================================================*
EOFJCL   DS    0H
         OI    STATUS,JCLWROTE     Indicate all JCL has been written
         CLOSE JCLFILE             Close the JCL dataset
         TM    SRSFLAGS,SRSEOF     End-of-dataset call ?
         BNO   RETURN0             No, wait for it
         SPACE 5
*=====================================================================*
* All data and JCL has been written for this dataset.                 *
*=====================================================================*
JOBDONE  DS    0H
         LA    R5,DATABUFF         Get address of data buffer
         MVI   0(R5),C' '          Initialize buffer ..
         EX    R4,CLRRDR              .. to blanks
         MVC   0(L'EOFREC,R5),EOFREC  Write "/*EOF" to reader
         PUT   OUTRDR,(5)          Write eof statement
         B     RETURN0             Return to mainline
RETURN0  DS    0H
         SLR   R15,R15             Set rc=0
RETURN   DS    0H
         PR                        Return to caller
         EJECT
*
EOFREC   DC    C'/*EOF'
*
STATUS   DC    BL1'0'    STATUS BITS
JCLBUFF  EQU   X'80'     WRITE JCL STATEMENTS FROM BUFFER
SYSBUFF  EQU   X'40'     WRITE SYSOUT DATA FROM BUFFER
JCLWROTE EQU   X'20'     ALL JCL STATEMENTS HAVE BEEN WRITTEN
SYSWROTE EQU   X'10'     ALL SYSOUT DATA HAS BEEN WRITTEN
*
DATABUFF DS    0F,CL256
*
JCLFILE  DCB   DDNAME=JCLFILE,DSORG=PS,MACRF=(GL),EODAD=EOFJCL
OUTRDR   DCB   DDNAME=OUTRDR,DSORG=PS,MACRF=(PM),LRECL=80,BLKSIZE=80
         EJECT
* MAPPING MACROS
         SRSDATA
         DCBD DSORG=PS             MAP DCB
         YREGS
         END
